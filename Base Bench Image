Start-Transcript -OutputDirectory "C:\Utils" -IncludeInvocationHeader

Write-Host "Setting script execution policy and to TLS1.2" -ForegroundColor Blue -BackgroundColor Yellow
        Set-ExecutionPolicy -ExecutionPolicy Bypass -Force -Scope Process
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
        Install-PackageProvider -Name NuGet -Force
        Install-Module WriteAscii -Force
        Install-Module PSWindowsUpdate -Force
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        Install-Script -Name Get-WindowsAutoPilotInfo -Force
        Get-WindowsAutoPilotInfo -OutputFile C:\Utils\AutoPilotHWInfo.csv

Write-Ascii -InputObject "S5 Logic - Cloud Imaging"

Write-Ascii -InputObject "Beginning Base Bench Setup...."
Write-Host "Sit tight, grab a drink this may take a while!!!" -ForegroundColor Blue -BackgroundColor Yellow
Start-Sleep -Seconds 10

Write-Ascii -InputObject "Renaming Computer"         
Write-Host "Renaming Computer" -ForegroundColor Blue -BackgroundColor Yellow
$SN = Get-WmiObject win32_bios | Select -ExpandProperty SerialNumber
Rename-Computer -NewName 'RenameMe-$SN'
Write-Host "Computer Renamed to RenameMe-$SN" -ForegroundColor Blue -BackgroundColor Yellow
Clear-Host

Write-Ascii -InputObject "Installing Catchall version of RMM"
Write-Host "Installing Connectwise Automate. Please be sure to move to proper company" -ForegroundColor Blue -BackgroundColor Yellow
Start-Process C:\Utils\CatchallAutomate.msi -ArgumentList '/qn'
Clear-Host


Write-Ascii -InputObject "Installing Base Applications"
Write-Host "Installing Base Applications" -ForegroundColor Blue -BackgroundColor Yellow
                choco upgrade chocolatey -force -y --limitoutput
                choco upgrade adobereader -force -y --limitoutput
                choco upgrade adobe-creative-cloud
                choco upgrade googlechrome --ignore-checksums -force -y --limitoutput
                choco upgrade firefox -force -y --limitoutput
                choco upgrade microsoft-teams.install -force -y --limitoutput
                choco upgrade 7zip.install -force -y --limitoutput
                choco upgrade zoom -force -y --limitoutput
                choco upgrade vlc -force -y --limitoutput
                choco upgrade 7zip -force -y --limitoutput
                choco upgrade powershell -force -y --limitoutput
                choco upgrade office365business --package-parameters="'/productid:O365BusinessRetail /exclude: Groove Lync Skype /language:en-US /updates:TRUE /eula:TRUE'" -force -y --limitoutput
                choco upgrade dotnetfx -force -y --limitoutput
                choco upgrade itunes -force -y --limitoutput
Clear-Host


Write-Ascii -InputObject "Installing Manufacturer Support Software"
Write-Host "Installing Manufacturer driver support software. Also, installing driver and BIOS updates." -ForegroundColor Blue -BackgroundColor Yellow
$Manufacturer = Get-WmiObject win32_bios | Select -ExpandProperty Manufacturer
Write-Host "Determined the Manufacturer of this workstation is $Manufacturer. Proceeding with correct driver software." -ForegroundColor Blue -BackgroundColor Yellow

If ($Manufacturer -like '*Dell*') {

         Write-Host "Installing Dell Command Update. Updating drivers and BIOS." -ForegroundColor Blue -BackgroundColor Yellow
         choco upgrade dellcommandupdate -force -y --limitoutput
         Start-Sleep -Seconds 60
         Start-Service -Name DellClientManagementService

         $DCU_x86 = Test-Path "C:\Program Files (x86)\Dell\CommandUpdate\dcu-cli.exe"
         $DCU_x64 = Test-Path "C:\Program Files\Dell\CommandUpdate\dcu-cli.exe"

     If ($DCU_x86 -eq $true){

                    Start-Process "C:\Program Files (x86)\Dell\CommandUpdate\dcu-cli.exe" -ArgumentList "/applyUpdates"

                        }

     If ($DCU_x64 -eq $true){

                    Start-Process "C:\Program Files\Dell\CommandUpdate\dcu-cli.exe" -ArgumentList "/applyUpdates"

                        }
                                 }

If ($Manufacturer -like '*Lenovo*') {

       choco upgrade lenovo-thinkvantage-system-update -force -y --limitoutput
                    Write-Host "Installing Lenovo System Update. Updating drivers and BIOS." -ForegroundColor Blue -BackgroundColor Yellow
                    Start-Sleep -Seconds 60
                    Start-Process "C:\Program Files (x86)\Lenovo\System Update\Tvsu.exe" -ArgumentList "/CM -search A -action INSTALL -noicon -includerebootpackages 1,3,4 -noreboot"

                                      }

If ($Manufacturer -like '*HP*') {

        choco upgrade hpsupportassistant -force -y --limitoutput
                    Write-Host "Installing HP Support Assistant. Updating drivers and BIOS." -ForegroundColor Blue -BackgroundColor Yellow
                    Start-Sleep -Seconds 60
                    Start-Process "C:\Utils\HPSA8\InstallHPSA.exe" -ArgumentList "/S /v/qn"

                                                }
If ($Manufacturer -like '*Hewlett*') {

        choco upgrade hpsupportassistant -force -y --limitoutput
                    Write-Host "Installing HP Support Assistant. Updating drivers and BIOS." -ForegroundColor Blue -BackgroundColor Yellow
                    Start-Sleep -Seconds 60
                    Start-Process "C:\Utils\HPSA8\InstallHPSA.exe" -ArgumentList "/S /v/qn"

                                                }

Clear-Host


Write-Ascii -InputObject "Installing available Windows and optional updates"
Write-Host "Installing PSWindowsUpdate Module. Installing ALL available Windows and Optional Updates, including any feature updates." -ForegroundColor Blue -BackgroundColor Yellow
Get-WindowsUpdate -Install -AcceptAll -AutoReboot | Select InstallResult, Title, Description | Format-Table
Clear-Host

$WindowsPCHealthCheck = Get-WmiObject win32_product | Where Name -Like "Windows PC Health Check"
$WindowsPCHealthCheck.Uninstall()
$McAfee = Get-WmiObject win32_product | Where Vendor -Like "*McAfee*"
$McAfee.Uninstall()


$delay = 10
if($delay -gt 1)
    {

    Write-Output "Rebooting computer in $delay seconds -ForegroundColor Blue -BackgroundColor Yellow";
    #Start-Sleep -Seconds $delay
     
    while($delay -gt 0)
        {
        Start-Sleep -Seconds 1;
        $delay -= 1;
        Write-Output "Rebooting computer in $delay seconds -ForegroundColor Blue -BackgroundColor Yellow";
        }
    }

Clear-Host

Write-Ascii -InputObject "Preparing S5 Recovery Partition"
Write-Host "S5 - Downloading Custom Image and preparing." -ForegroundColor Blue -BackgroundColor Yellow

#Invoke-WebRequest -Uri "https://onedrive.live.com/download?cid=AF928892EBCFB343&resid=af928892ebcfb343%21107501&authkey=AOIuaQpswaQvVO4" -OutFile "C:\Utils\7z.dll"
#Invoke-WebRequest -Uri "https://onedrive.live.com/download?cid=AF928892EBCFB343&resid=af928892ebcfb343%21107502&authkey=AOqF-gkw5Yoexm0" -OutFile "C:\Utils\7z.exe"
#Invoke-WebRequest -Uri "https://onedrive.live.com/download?cid=AF928892EBCFB343&resid=AF928892EBCFB343%21143781&authkey=AJ0LRrZ1wmd5M6k" -OutFile "C:\Utils\S5_Win10PROx64.iso"
#Unblock-File -Path "C:\Utils\7z.exe"
#Unblock-File -Path "C:\Utils\7z.exe"
#Unblock-File -Path "C:\Utils\S5_Win10PROx64.iso"

#New-Item -Path C:\Utils -Name WindowsISO -ItemType Directory -Force
#Start-Process -FilePath "C:\Utils\7z.exe" -ArgumentList 'x C:\Utils\S5_Win10PROx64.iso -oc:\Utils\WindowsISO -y'
#Move-Item -Path C:\Utils\WindowsISO\* -Destination D:\ -Force

#Remove-Item C:\Utils\WindowsISO -Force
#Remove-Item C:\Utils\S5_Win10PROx64.iso -Force

Shutdown /r
Stop-Transcript
